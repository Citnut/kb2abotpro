const { getParam, round, random } = kb2abot.helpers,
	//{ getUserInfo } = kb2abot.helpers.fca,
	listItem = require("../data/cauca/item.json"),
	listFish = require("../data/cauca/data.json");
let msg = {
	shop: `„Äå Fishing Shop „Äç\nH√£y ph·∫£n h·ªìi (reply) tin nh·∫Øn n√†y b·∫±ng m·ªôt trong nh·ªØng s·ªë sau\n\nüíµ 1/ mua v·∫≠t ph·∫©m\nüì§ 2/ b√°n v·∫≠t ph·∫©m\nüè† 3/ v·ªÅ nh√†`,
	inventory: `„Äå Inventory „Äç\nH√£y ph·∫£n h·ªìi (reply) tin nh·∫Øn n√†y b·∫±ng m·ªôt trong nh·ªØng s·ªë sau\n\nüìú 1/ ki·ªÉm tra c·∫ßn c√¢u\nüì¶ 2/ m·ªü t√∫i ƒë·ªì`,		
	home: `„Äå Home „Äç\nH√£y ph·∫£n h·ªìi (reply) tin nh·∫Øn n√†y b·∫±ng m·ªôt trong nh·ªØng s·ªë sau\n\nüì§ 1/ N√¢ng c·∫•p t√∫i ƒë·ªì\nüß∞ 2/ S·ª≠a ch·ªØa c·∫ßn c√¢u c·ªßa b·∫°n`		
};

async function getRarityRecursion () {
    const map = {
        'VeryCommon': 39,
        'Common': 29,
        'Uncommon': 22,
        'Rare': 7,
        'VeryRare': 3
    };
    const rarityList = [
        'Very Common',
        'Common',
        'Uncommon',
        'Rare',
        'Very Rare'
    ];
    let rarityMap = [];
    let totalMap = map.VeryCommon + map.Common + map.Uncommon + map.Rare + map.VeryRare;

    for (let i = 0; i <= totalMap; i++) {
    	if (i <= map.VeryCommon) {
    		rarityMap.push("Very Common")
    	};
    	if (map.VeryCommon < i <= (map.VeryCommon + map.Common)) {
    		rarityMap.push("Common")
    	};
    	if ((map.VeryCommon + map.Common) < i  <= (map.VeryCommon + map.Common + map.Uncommon)) {
    		rarityMap.push("Uncommon")
    	};
    	if ((map.VeryCommon + map.Common + map.Uncommon) < i  <= (map.VeryCommon + map.Common + map.Uncommon + map.Rare)) {
    		rarityMap.push("Rare")
    	};
    	if ((map.VeryCommon + map.Common + map.Uncommon + map.Rare) < i) {
    		rarityMap.push("Very Rare")
    	}
    };
    let newRarityMap = rarityMap.sort(() => Math.random() - 0.5);
    return newRarityMap[round(random(0, totalMap), 0)]
};
module.exports = {
	keywords: ['fishing'], 
	name: 'c√¢u c√° :)))',
	description: 'l·∫°i l√† m·ªôt plugin th√¥ng n√£o ƒë∆∞·ª£c remake b·ªüi Citnut',
	guide: 'register|shop|inventory',
	childs: [],
	permission: { '*': '*' },
	datastoreDesign: {
		account: {
			global: {},
			local: {},
		},
		thread: {
			global: {},
			local: {},
		},
	},
	async onLoad() { },
	hookType: 'non-command',
	async onMessage(message, reply) {
		if (message.type != "message_reply" || isNaN(message.body)) return;
		const { body, senderID, messageReply } = message;
		let stg = this.storage.account.global,
			prefix = this.storage.thread.global.prefix;
			//money = this.storage.account.global.eco[senderID].money;
		if (!this.storage.account.global.fishing_) { this.storage.account.global.fishing_ = {} };
		if (!this.storage.account.global.fishing_[senderID]) { this.storage.account.global.fishing_[senderID] = {} };
		if (!this.storage.account.global.fishing_[senderID].register) return;
		let data = this.storage.account.global.console;
		let menuShop = [];
		for (let i = 0; i < listItem.length; i++) {
			menuShop.push(`‚ùØ ${i + 1}/ ${listItem[i].name}: ${listItem[i].price}üíµ - ƒê·ªô b·ªÅn: ${listItem[i].durability}`)
		};
		if (messageReply.senderID != data.bot.id) return;
		let msga = {
			buy: `„Äå Fishing Shop „Äç\nH√£y ph·∫£n h·ªìi (reply) tin nh·∫Øn n√†y b·∫±ng m·ªôt trong nh·ªØng s·ªë sau\n\n${menuShop.join("\n")}`,
			bag: `[ Fishing Upgrage ] Hi·ªán t·∫°i b·∫°n ƒëang c√≥ ${this.storage.account.global.fishing_[senderID].inventory.length + 1} v·ªã tr√≠ c√≥ th·ªÉ ch·ª©a ƒë·ªì\nƒê·ªÉ mua th√™m v·ªã tr√≠ ch·ª©a ƒë·ªì, b·∫°n h√£y ph·∫£n h·ªìi (reply) tin nh·∫Øn n√†y s·ªë l∆∞·ª£ng v·ªã tr√≠ b·∫°n mu·ªën mua!`
		};
		if (!Object.values(msg).includes(messageReply.body) && !Object.values(msga).includes(messageReply.body)) return;
		let name = data[message.senderID].toUpperCase();
		
		
		switch (messageReply.body) {
			case msg.shop:
				switch (body) {
					case "1":
						return reply(msga.buy)
					break;
					case "2":
						try {
							if (this.storage.account.global.fishing_[senderID].inventory[0].name == "Empty") return reply(`b·∫°n kh√¥ng c√≥ con c√° n√†o ƒë·ªÉ b√°n!`);
							let total = index = 0;
							for (item of this.storage.account.global.fishing_[senderID].inventory) {
								total += item.price;
								this.storage.account.global.fishing_[senderID].inventory[index] = {
	                                name: "Empty",
	                                size: 0.0,
	                                price: 0
	                            };
	                            index++
							};
							this.storage.account.global.eco[senderID].money += total;
							return reply(`üí≥ s·ªë t√†i kho·∫£n: ${senderID}\nüí≥ giao d·ªãch: +${total}üíµ\nüí≥ n·ªôi dung: ${name} B√ÅN C√Å\nüí≥ s·ªë d∆∞ ch√≠nh: ${this.storage.account.global.eco[senderID].money}üíµ`)
						} catch (e) {
							console.error(e);
							return reply(`ƒë√£ x·∫£y ra l·ªói`)
						}
					break;
					case "3":
						return reply(msg.home)
					break;
					default:
						return reply(`l·ª±a ch·ªçn c·ªßa b·∫°n kh√¥ng c√≥ trong danh s√°ch!`);
					break
				}
			break;
			case msg.inventory:
				switch (body) {
					case "1":
						if (!this.storage.account.global.fishing_[senderID].fishingrod.name) { return reply(`b·∫°n ch∆∞a c√≥ c·∫ßn c√¢u.\n\nTIP: ƒê·ªÉ ƒë·∫øn c·ª≠a h√†ng h√£y d√πng l·ªánh ${prefix}fishing shop`) };
						return reply(`„Äå Inventory „Äç\nB·∫°n ƒëang s·ªü h·ªØu ${this.storage.account.global.fishing_[senderID].fishingrod.name}\nƒê·ªô b·ªÅn: ${this.storage.account.global.fishing_[senderID].fishingrod.durability}/${this.storage.account.global.fishing_[senderID].fishingrod.needfix*2}\n\nTIP: ${(this.storage.account.global.fishing_[senderID].fishingrod.durability>this.storage.account.global.fishing_[senderID].fishingrod.needfix)?("c·∫ßn c√¢u c·ªßa b·∫°n n√™n ƒë∆∞·ª£c s·ª≠a ch·ªØa"):"c·∫ßn c√¢u c·ªßa b·∫°n c√≤n m·ªõi"}`)
					break;
					case "2":
						let listInv = [], invMsg = ``, _index = 1;
						for (let i = 0; i < this.storage.account.global.fishing_[senderID].inventory.length; i++) {
							if (this.storage.account.global.fishing_[senderID].inventory[i].name != "Empty") {
								listInv.push(`${_index}/ ${this.storage.account.global.fishing_[senderID].inventory[i].name}: ${this.storage.account.global.fishing_[senderID].inventory[i].size}cm | ${this.storage.account.global.fishing_[senderID].inventory[i].price}üíµ`);
								_index += 1
							}
						};
						if (listInv.length == 0) { return reply(`t√∫i c·ªßa b·∫°n ch∆∞a c√≥ con c√° n√†o`) };
						return reply(`„Äå Inventory „Äç\n${listInv.join(`\n`)}\n„Äå KB2ABOT „Äç`)
					break;
					default:
						return	reply(`l·ª±a ch·ªçn c·ªßa b·∫°n kh√¥ng c√≥ trong danh s√°ch!`);
					break
				}
			break;
			case msga.buy:
				try {
					if (body > listItem.length || body < 1) { return reply(`l·ª±a ch·ªçn c·ªßa b·∫°n kh√¥ng t·ªìn t·∫°i!`) };
					let choose = listItem[parseInt(body) - 1];
					if (this.storage.account.global.eco[senderID].money < choose.price) { return reply(`b·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ mua n√≥\n\nb·∫°n c√≤n thi·∫øu: ${choose.price - this.storage.account.global.eco[senderID].money}üíµ`) };
					this.storage.account.global.fishing_[senderID].fishingrod.name = choose.name;
					this.storage.account.global.fishing_[senderID].fishingrod.time = choose.time;
					this.storage.account.global.fishing_[senderID].fishingrod.durability = choose.durability;
					this.storage.account.global.fishing_[senderID].fishingrod.needfix = choose.fix;
					this.storage.account.global.fishing_[senderID].fishingrod.fix = choose.price / 2;
					this.storage.account.global.eco[senderID].money -= choose.price;
					return reply(`üí≥ s·ªë t√†i kho·∫£n: ${senderID}\nüí≥ giao d·ªãch: -${choose.price}üíµ\nüí≥ n·ªôi dung: ${name} MUA ${choose.name.toUpperCase()}\nüí≥ s·ªë d∆∞ ch√≠nh: ${this.storage.account.global.eco[senderID].money}üíµ`)
				} catch (e) {
					console.error(e);
					return reply(`ƒë√£ x·∫£y ra l·ªói`)
				}
			break;
			case msg.home:
				switch (body) {
					case "1":
						return reply(msga.bag)
					break;
					case "2":
						if (this.storage.account.global.fishing_[senderID].fishingrod.durability > this.storage.account.global.fishing_[senderID].fishingrod.needfix) { return reply(`c·∫ßn c√¢u c·ªßa b·∫°n ch∆∞a c·∫ßn s·ª≠a ch·ªØa`) };
						if (this.storage.account.global.eco[senderID].money < this.storage.account.global.fishing_[senderID].fishingrod.fix) { return reply(`b·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ s·ª≠a c·∫ßn c√¢u\n\nb·∫°n c√≤n thi·∫øu: ${this.storage.account.global.fishing_[senderID].fishingrod.fix - money}üíµ`) };
						this.storage.account.global.fishing_[senderID].fishingrod.durability = this.storage.account.global.fishing_[senderID].fishingrod.needfix*2;
						this.storage.account.global.eco[senderID].money -= this.storage.account.global.fishing_[senderID].fishingrod.fix;
						return reply(`üí≥ s·ªë t√†i kho·∫£n: ${senderID}\nüí≥ giao d·ªãch: -${this.storage.account.global.fishing_[senderID].fishingrod.fix}üíµ\nüí≥ n·ªôi dung: ${name} S·ª¨A C·∫¶N C√ÇU\nüí≥ s·ªë d∆∞ ch√≠nh: ${money}üíµ`)
					break;
					default:
						return reply(`l·ª±a ch·ªçn c·ªßa b·∫°n kh√¥ng c√≥ trong danh s√°ch!`);
					break
				}
			break;
			case msga.bag:
				if (body < 0) { return reply(`l·ª±a ch·ªçn c·ªßa b·∫°n kh√¥ng ph·∫£i l√† m·ªôt s·ªë √¢m!`) };
				const updatePrice = parseInt(body)*2000;
				let cost = this.storage.account.global.eco[senderID].money - updatePrice;
				if (cost < 0) { return reply(`b·∫°n kh√¥ng ƒë·ªß ti·ªÅn\n\nb·∫°n c√≤n thi·∫øu: ${cost*-1}üíµ`)};
				for (let i = 0; i < parseInt(body) - 1; i++) {
					this.storage.account.global.fishing_[senderID].inventory.push({
						name: "Empty",
					    size: 0.0,
					    price: 0
					})
				};
				this.storage.account.global.eco[senderID].money = cost;
				return reply(`üí≥ s·ªë t√†i kho·∫£n: ${senderID}\nüí≥ giao d·ªãch: -${updatePrice}üíµ\nüí≥ n·ªôi dung: ${name} N√ÇNG C·∫§P T√öI ƒê·ªí\nüí≥ s·ªë d∆∞ ch√≠nh: ${this.storage.account.global.eco[senderID].money}üíµ`)
			break;
			default:
			break
		}
	},

	async onCall(message, reply) {
		const { body, senderID } = message;
		let stg = this.storage.account.global,
			setting = this.storage.account.global.citSetting,
			prefix = this.storage.thread.global.prefix;
			//money = this.storage.account.global.eco
		if (!stg.fishing_) { stg.fishing_ = {} };
		if (!stg.fishing_[senderID]) { stg.fishing_[senderID] = {} };
		//if (!money) { money = {} };
		//let	this.storage.account.global.fishing_[senderID] = stg.fishing_[senderID];
		
		if (setting.run.fishing != true) { return reply(`plugin n√†y ƒë√£ b·ªã t·∫Øt`) };

		switch (getParam(body)) {
			case "register":
			case "r":
				try {
					if (this.storage.account.global.fishing_[senderID].register) { return reply(`b·∫°n ƒë√£ ƒëƒÉng k√≠ tham gia tr√≤ ch∆°i r·ªìi!`) };
					let fishy = {};
					fishy.fishingrod = {};
					fishy.inventory = [];
					for (let i = 0; i < 9; i++) {
						fishy.inventory.push({
							name: "Empty",
					        size: 0.0,
					        price: 0
						})
					};
					fishy.lastTime = fishy.point = fishy.totalCatch = 0;
					fishy.register = true;
					this.storage.account.global.fishing_[senderID] = fishy;
					return reply(`b·∫°n ƒë√£ ƒëƒÉng k√≠ tham gia tr√≤ ch∆°i th√†nh c√¥ng!`)
				} catch (e) {
					console.error(e);
					return reply(`ƒë√£ x·∫£y ra l·ªói`)
				}
			break;
			case "shop":
			case "s":
				try {
					if (!this.storage.account.global.fishing_[senderID].register) { return reply(`b·∫°n ch∆∞a ƒëƒÉng k√≠ tham gia tr√≤ ch∆°i.\nTIP: ƒê·ªÉ tham gia, h√£y d√πng l·ªánh ${prefix}fishing register`) };
					return reply(msg.shop)
				} catch (e) {
					console.error(e);
					return reply(`ƒë√£ x·∫£y ra l·ªói`)
				}
			break;
			case "inventory":
			case "inv":
				try {
					if (!this.storage.account.global.fishing_[senderID].register) { return reply(`b·∫°n ch∆∞a ƒëƒÉng k√≠ tham gia tr√≤ ch∆°i.\nƒê·ªÉ tham gia, h√£y d√πng l·ªánh ${prefix}fishing register`) };
					return reply(msg.inventory)
				} catch(e) {
					console.error(e);
					return reply(`ƒë√£ x·∫£y ra l·ªói`)
				}
			break;
			default:
				try {
					if (!this.storage.account.global.fishing_[senderID].register) { return reply(`b·∫°n ch∆∞a ƒëƒÉng k√≠ tham gia tr√≤ ch∆°i.\nƒê·ªÉ tham gia, h√£y d√πng l·ªánh ${prefix}fishing register`) };
					//const dateNow = moment().tz("Asia/Ho_Chi_minh"),
                	const format = new Intl.NumberFormat();
                	if (!this.storage.account.global.fishing_[senderID].fishingrod.name) { return reply(`b·∫°n ch∆∞a c√≥ c·∫ßn c√¢u, h√£y mua c·∫ßn c√¢u nh√°.\nTIP: ƒê·ªÉ ƒë·∫øn c·ª≠a h√†ng h√£y d√πng l·ªánh ${prefix}fishing shop`) };
                	if (this.storage.account.global.fishing_[senderID].fishingrod.durability <= 0) { return reply(`üß∞ c·∫ßn c√¢u c·ªßa b·∫°n ƒë√£ h·ªèng, h√£y s·ª≠a n√≥ ho·∫∑c mua m·ªõi üß∞`) };
                	if (new Date().getTime() < this.storage.account.global.fishing_[senderID].lastTime + (this.storage.account.global.fishing_[senderID].fishingrod.time*1000)) { 
                		let cooldown = (this.storage.account.global.fishing_[senderID].lastTime + (this.storage.account.global.fishing_[senderID].fishingrod.time*1000)) - new Date().getTime();
                		return reply(`‚è≥ b·∫°n c·∫ßn ƒë·ª£i th√™m ${round(cooldown/1000)} gi√¢y n·ªØa ƒë·ªÉ c√° xu·∫•t hi·ªán ‚è≥`) };
					if (this.storage.account.global.fishing_[senderID].inventory[this.storage.account.global.fishing_[senderID].inventory.length - 1].name != "Empty") { return reply(`t√∫i ƒë·ªì c·ªßa b·∫°n ƒë√£ h·∫øt ch·ªó tr·ªëng`) };

					const fishRarity = await getRarityRecursion();
					let currentHour = new Date().getHours();
                    let currentMonth = new Date().getMonth();

					let fishData = [];
                    for (let i = 0; i < listFish.length; i++) {
                        if (listFish[i].rarity.includes(fishRarity) && listFish[i].time.includes(currentHour) && listFish[i].months.includes(currentMonth)) {
                            fishData.push(listFish[i])
                        }
                    };
                    if (!fishData[0]) { return reply(`ü§∑‚Äç‚ôÄÔ∏è hi·ªán t·∫°i kh√¥ng c√≤n c√° ƒë·ªÉ c√¢u, h√£y ƒë·ª£i m·ªôt l√∫c v√† th·ª≠ l·∫°i nha ü§∑‚Äç‚ôÄÔ∏è`) };

                    let caught = fishData[Math.floor(Math.random() * parseInt(fishData.length))];
                    caught.size = (typeof caught.size != "array") ? caught.size : (Math.random() * (caught.size[1] - caught.size[0]) + caught.size[0]).toFixed(1);
                    this.storage.account.global.fishing_[senderID].fishingrod.durability -= 1;
                    this.storage.account.global.fishing_[senderID].lastTime = new Date().getTime();
                    this.storage.account.global.fishing_[senderID].totalCatch += 1;
                    this.storage.account.global.fishing_[senderID].point += caught.price;
                    for (let i = 0; i < this.storage.account.global.fishing_[senderID].inventory.length; i++) {
                    	if (this.storage.account.global.fishing_[senderID].inventory[i].name == "Empty") { this.storage.account.global.fishing_[senderID].inventory[i] = caught; i = this.storage.account.global.fishing_[senderID].inventory.length }
                    };

                    return reply(`=== B·∫°n ƒë√£ c√¢u ƒë∆∞·ª£c: ${caught.name} ===\n\nüîé K√≠ch th∆∞·ªõc: ${caught.size} cm üîç\nüéÜ ƒê·ªô hi·∫øm: ${caught.rarity} üéÜ\nüíµ gi√° b√°n: ${format.format(caught.price)}üíµ`)
				} catch(e) {
					console.error(e);
					return reply(`ƒë√£ x·∫£y ra l·ªói`)
				}
			break
		}
	}
}
